Index: b/lib/perfSONAR_PS/RegularTesting/MeasurementArchives/perfSONARBUOYBase.pm
===================================================================
--- a/lib/perfSONAR_PS/RegularTesting/MeasurementArchives/perfSONARBUOYBase.pm	2025-03-19 12:33:28.090211686 -0400
+++ b/lib/perfSONAR_PS/RegularTesting/MeasurementArchives/perfSONARBUOYBase.pm	2025-03-19 12:33:29.836306014 -0400
@@ -8,7 +8,6 @@
 use Log::Log4perl qw(get_logger);
 use Params::Validate qw(:all);
 
-use Math::Int64 qw(uint64 uint64_to_number);
 use Digest::MD5;
 
 use DBI;
Index: b/lib/perfSONAR_PS/RegularTesting/Utils.pm
===================================================================
--- a/lib/perfSONAR_PS/RegularTesting/Utils.pm	2025-03-19 12:33:28.097096033 -0400
+++ b/lib/perfSONAR_PS/RegularTesting/Utils.pm	2025-03-19 12:33:29.837359307 -0400
@@ -26,7 +26,7 @@
 use Data::Validate::IP qw(is_ipv4 is_ipv6);
 use Net::IP;
 
-use Math::Int64 qw(uint64 uint64_to_number);
+use Math::BigInt;
 use perfSONAR_PS::Utils::DNS qw(resolve_address);
 
 use DateTime;
@@ -86,8 +86,10 @@
 sub owptime2datetime {
     my ($owptime) = @_;
 
-    my $tstamp = uint64($owptime);
-    $tstamp = uint64_to_number(($tstamp >> 32) & 0xFFFFFFFF);
+    my $tstamp = Math::BigInt->new($owptime);
+    $tstamp->brsft(32);
+    $tstamp->band(0xFFFFFFFF);
+    $tstamp = $tstamp->numify();
     $tstamp -= JAN_1970;
     return DateTime->from_epoch(epoch => $tstamp);
 }
@@ -111,12 +113,12 @@
 sub datetime2owptime {
     my ($datetime) = @_;
 
-    my $bigtime = uint64($datetime->epoch());
-    $bigtime = ($bigtime + JAN_1970) * $scale;
+    my $bigtime = Math::BigInt->new($datetime->epoch());
+    $bigtime->badd(JAN_1970);
+    $bigtime->bmul($scale);
     print "Big Time: $bigtime\n";
-    $bigtime += $datetime->nanosecond();
-    $bigtime =~ s/^\+//;
-    return uint64_to_number($bigtime);
+    $bigtime->badd($datetime->nanosecond());
+    return $bigtime->numify();
 }
 
 =head2 datetime2owptstampi($datetime)
@@ -125,9 +127,10 @@
 sub datetime2owptstampi{
     my ($datetime) = @_;
 
-    my $bigtime = uint64(datetime2owptime($datetime));
+    my $bigtime = Math::BigInt->new(datetime2owptime($datetime));
+    $bigtime->brsft(32);
 
-    return uint64_to_number($bigtime>>32);
+    return $bigtime->numify();
 }
 
 =head2 choose_endpoint_address()
