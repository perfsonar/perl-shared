Index: b/lib/perfSONAR_PS/NPToolkit/Services/httpd.pm
===================================================================
--- a/lib/perfSONAR_PS/NPToolkit/Services/httpd.pm	2024-10-15 11:57:11.368736932 -0400
+++ b/lib/perfSONAR_PS/NPToolkit/Services/httpd.pm	2024-10-15 11:57:12.546358364 -0400
@@ -11,10 +11,10 @@
     my ( $self, %conf ) = @_;
 
     $conf{description}  = "Apache HTTP Server" unless $conf{description};
-    $conf{init_script} = "httpd" unless $conf{init_script};
-    $conf{process_names} = "httpd" unless $conf{process_names};
-    $conf{pid_files} = "/var/run/httpd/httpd.pid" unless $conf{pid_files};
-    $conf{package_names} = [ "httpd" ] unless $conf{package_names};
+    $conf{init_script} = "apache2" unless $conf{init_script};
+    $conf{process_names} = "apache2" unless $conf{process_names};
+    $conf{pid_files} = "/run/apache2/apache2.pid" unless $conf{pid_files};
+    $conf{package_names} = [ "apache2" ] unless $conf{package_names};
 
     $self->SUPER::init( %conf );
 
Index: b/lib/perfSONAR_PS/NPToolkit/Services/Cassandra.pm
===================================================================
--- a/lib/perfSONAR_PS/NPToolkit/Services/Cassandra.pm	2024-10-15 11:57:11.367564610 -0400
+++ b/lib/perfSONAR_PS/NPToolkit/Services/Cassandra.pm	2024-10-15 11:57:12.547141815 -0400
@@ -15,7 +15,7 @@
     #Cassandra does not properly create /var/run/cassandra directory on boot, only creates
     #  on install which then gets removed on reboot. Removing this for now.
     #$conf{pid_files} = "/var/run/cassandra/cassandra.pid" unless $conf{pid_files};
-    $conf{package_names} = [ "cassandra20" ] unless $conf{package_names};
+    $conf{package_names} = [ "cassandra" ] unless $conf{package_names};
 
     $self->SUPER::init( %conf );
 
Index: b/lib/perfSONAR_PS/NPToolkit/Services/Base.pm
===================================================================
--- a/lib/perfSONAR_PS/NPToolkit/Services/Base.pm	2024-10-15 11:57:12.318716752 -0400
+++ b/lib/perfSONAR_PS/NPToolkit/Services/Base.pm	2024-10-15 11:57:12.547577269 -0400
@@ -8,6 +8,7 @@
 use fields 'LOGGER', 'INIT_SCRIPT', 'PID_FILES', 'PROCESS_NAMES', 'DESCRIPTION', 'CAN_DISABLE', 'REGULAR_RESTART', 'PACKAGE_NAMES', 'SYSTEMD_SERVICES';
 use Dpkg::Control;
 use Dpkg::Version;
+use File::Basename;
 
 sub new {
     my ( $package ) = @_;
@@ -162,7 +163,7 @@
     open(STDERR, ">", File::Spec->devnull());
     open(STDOUT, ">", File::Spec->devnull());
 
-    my $ret = system( "/usr/bin/systemctl", @param );
+    my $ret = system( "/bin/systemctl", @param );
 
     # restore stderr + stdout
     open(STDERR, ">&", $stderr);
@@ -181,7 +182,7 @@
 
     # Use systemd if available
     return $self->run_systemctl( 'is-enabled' => $self->{INIT_SCRIPT} )
-        if -x '/usr/bin/systemctl';
+        if -x '/bin/systemctl';
 
     # Check if the service is "on" in this run level.
     my $curr_runlevel;
@@ -196,17 +197,12 @@
 
     my $disabled = 1;
 
-    # turn off stderr
-    open(my $stderr, ">&STDERR");
-    open(STDERR, ">", File::Spec->devnull());
-
-    my $chkconfig_output = `/sbin/chkconfig --list $self->{INIT_SCRIPT}`;    
-
-    # restore stderr
-    open(STDERR, ">&", $stderr);
+    if (opendir(RC, "/etc/rc$curr_runlevel.d")) {
+        my @links = readdir(RC);
+        closedir(RC);
 
-    foreach my $line (split('\n', $chkconfig_output)) {
-        $disabled = 0 if ($line =~ /$curr_runlevel:on/);
+        my $service = basename($self->{INIT_SCRIPT});
+        $disabled = 0 if grep { /^S\d+$service$/ } @links;
     }
 
     return $disabled;
@@ -222,7 +218,7 @@
 
     # Use systemd if available
     return $self->run_systemctl( 'enable' => $self->{INIT_SCRIPT} )
-        if -x '/usr/bin/systemctl';
+        if -x '/bin/systemctl';
 
     # turn off stderr + stdout
     open(my $stderr, ">&STDERR");
@@ -230,9 +226,9 @@
     open(STDERR, ">", File::Spec->devnull());
     open(STDOUT, ">", File::Spec->devnull());
 
-    system( "/sbin/chkconfig --del  " . $self->{INIT_SCRIPT} );
+    system("/usr/sbin/update-rc.d", basename($self->{INIT_SCRIPT}), "disable");
 
-    my $ret = system( "/sbin/chkconfig --add  " . $self->{INIT_SCRIPT} );
+    my $ret = system("/usr/sbin/update-rc.d", basename($self->{INIT_SCRIPT}), "enable");
 
     # restore stderr + stdout
     open(STDERR, ">&", $stderr);
@@ -251,7 +247,7 @@
 
     # Use systemd if available
     return $self->run_systemctl( 'disable' => $self->{INIT_SCRIPT} )
-        if -x '/usr/bin/systemctl';
+        if -x '/bin/systemctl';
 
     # turn off stderr + stdout
     open(my $stderr, ">&STDERR");
@@ -259,7 +255,7 @@
     open(STDERR, ">", File::Spec->devnull());
     open(STDOUT, ">", File::Spec->devnull());
 
-    my $ret = system( "/sbin/chkconfig --del " . $self->{INIT_SCRIPT});
+    my $ret = system("/usr/sbin/update-rc.d", basename($self->{INIT_SCRIPT}), "disable");
 
     # restore stderr + stdout
     open(STDERR, ">&", $stderr);
@@ -278,7 +274,7 @@
 
     # Use systemd if available
     return $self->run_systemctl( $cmd => $self->{INIT_SCRIPT} )
-        if -x '/usr/bin/systemctl';
+        if -x '/bin/systemctl';
 
     # turn off stderr + stdout
     open(my $stderr, ">&STDERR");
@@ -286,7 +282,7 @@
     open(STDERR, ">", File::Spec->devnull());
     open(STDOUT, ">", File::Spec->devnull());
 
-    my $shell_cmd = "/sbin/service " . $self->{INIT_SCRIPT} . " " . $cmd;
+    my $shell_cmd = "/usr/sbin/service " . $self->{INIT_SCRIPT} . " " . $cmd;
 
     $self->{LOGGER}->debug($shell_cmd);
 
Index: b/lib/perfSONAR_PS/Utils/Host.pm
===================================================================
--- a/lib/perfSONAR_PS/Utils/Host.pm	2024-10-15 11:57:11.376973853 -0400
+++ b/lib/perfSONAR_PS/Utils/Host.pm	2024-10-15 11:57:12.548166388 -0400
@@ -509,7 +509,7 @@
 sub get_ntp_info {
     my $ntp;
 
-    my $ntp_result = `/usr/sbin/ntpq -p`;
+    my $ntp_result = `/usr/bin/ntpq -p`;
 
     my @ntp_response = split /\n/, $ntp_result;
     
Index: b/lib/perfSONAR_PS/NPToolkit/Services/YumCron.pm
===================================================================
--- a/lib/perfSONAR_PS/NPToolkit/Services/YumCron.pm	2024-10-15 11:57:11.368647516 -0400
+++ b/lib/perfSONAR_PS/NPToolkit/Services/YumCron.pm	2024-10-15 11:57:12.548605509 -0400
@@ -8,40 +8,42 @@
 sub init {
     my ( $self, %conf ) = @_;
 
-    $conf{description}  = "Yum Automatic Updates" unless $conf{description};
-    $conf{init_script} = "yum-cron" unless $conf{init_script};
-    $conf{process_names} = "yum" unless $conf{process_names};
-    $conf{pid_files} = "/var/lock/yum-cron.lock/pidfile" unless $conf{pid_files};
-    $conf{package_names} = [ "yum-cron" ] unless $conf{package_names};
+    $conf{description}  = "APT Automatic Updates" unless $conf{description};
+    $conf{package_names} = [ "unattended-upgrades" ] unless $conf{package_names};
 
     $self->SUPER::init( %conf );
 
     return 0;
 }
 
+sub disable_startup {
+    my ($self) = @_;
+
+    unlink '/etc/apt/apt.conf.d/60unattended-upgrades-perfsonar';
+}
+
 sub enable_startup {
     my ($self) = @_;
 
-    unless ($self->{INIT_SCRIPT}) {
-	$self->{LOGGER}->error("No init script specified for this service");
-	return -1;
+    my $action_file = '/etc/apt/apt.conf.d/60unattended-upgrades-perfsonar';
+    my $action_fd;
+    unless (open($action_fd, '>', $action_file)) {
+        $self->{LOGGER}->error("Could not opet $action_file: $!");
+        return -1;
     }
 
-    # turn off stderr + stdout
-    open(my $stderr, ">&STDERR");
-    open(my $stdout, ">&STDOUT");
-    open(STDERR, ">", File::Spec->devnull());
-    open(STDOUT, ">", File::Spec->devnull());
-
-    my $ret = system( "chkconfig --add  " . $self->{INIT_SCRIPT} );
-    #need to run chkconfig on
-    $ret = system( "chkconfig " . $self->{INIT_SCRIPT} . " on");
-    
-    # restore stderr + stdout
-    open(STDERR, ">&", $stderr);
-    open(STDOUT, ">&", $stdout);
-
-    return $ret;
+    print $action_fd <<"EOF";
+APT::Periodic::Update-Package-Lists "1";
+APT::Periodic::Download-Upgradeable-Packages "1";
+APT::Periodic::Unattended-Upgrade "1";
+APT::Periodic::AutocleanInterval "31";
+Unattended-Upgrade::Origins-Pattern:: "origin=perfSONAR";
+EOF
+
+    unless(close($action_fd)) {
+        $self->{LOGGER}->error("Could not close $action_file: $!");
+        return -1;
+    }
 }
 
 1;
Index: b/lib/perfSONAR_PS/NPToolkit/Services/NetworkBase.pm
===================================================================
--- a/lib/perfSONAR_PS/NPToolkit/Services/NetworkBase.pm	2024-10-15 11:57:11.368078313 -0400
+++ b/lib/perfSONAR_PS/NPToolkit/Services/NetworkBase.pm	2024-10-15 11:57:12.548925048 -0400
@@ -47,7 +47,7 @@
     open(STDERR, ">", File::Spec->devnull());
     open(STDOUT, ">", File::Spec->devnull());
 
-    my $shell_cmd = "/sbin/service configure_nic_parameters start";
+    my $shell_cmd = "/usr/sbin/service configure_nic_parameters start";
 
     $self->{LOGGER}->debug($shell_cmd);
 
Index: b/lib/perfSONAR_PS/NPToolkit/Services/NTP.pm
===================================================================
--- a/lib/perfSONAR_PS/NPToolkit/Services/NTP.pm	2024-10-15 11:57:11.367962106 -0400
+++ b/lib/perfSONAR_PS/NPToolkit/Services/NTP.pm	2024-10-15 11:57:12.549241920 -0400
@@ -9,7 +9,7 @@
 sub init {
     my ( $self, %conf ) = @_;
 
-    $conf{init_script} = "ntpd" unless $conf{init_script};
+    $conf{init_script} = "ntp" unless $conf{init_script};
     $conf{description}  = "NTP" unless $conf{description};
     $conf{process_names} = "ntpd" unless $conf{process_names};
     $conf{pid_files} = "/var/run/ntpd.pid" unless $conf{pid_files};
